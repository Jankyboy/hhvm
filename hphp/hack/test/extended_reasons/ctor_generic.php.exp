error: Typing[4110] Invalid argument

File ctor_generic.php, line 21, character 33 - line 21, character 39:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, »$sender«);
 22 |   }
 23 | }

Expected null

File ctor_generic.php, line 20, character 63 - line 20, character 66:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

But got string

File ctor_generic.php, line 20, character 39 - line 20, character 44:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, »string« $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

Here's why:

I checked the subtype constraint in [Main] because it was implied by the other constraints on the generic parameter TB of TestServiceBase.

  [Main] Step 1 of 2                                                            

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File ctor_generic.php, line 12, character 19 - line 12, character 29:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function »__construct«(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

The supertype comes from this expression

File ctor_generic.php, line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }


  [Main] Step 2 of 2                          (here is where the error occurred) 

These are function types so next I checked the 2nd function parameters.
Functions are contravariant in their parameters so the direction of the subtype relationship is reversed.

The subtype comes from this hint

File ctor_generic.php, line 20, character 39 - line 20, character 44:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, »string« $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

and flows into this expression

File ctor_generic.php, line 20, character 46 - line 20, character 47:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string »$b«, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

as the parameter hint

which itself flows into this expression

File ctor_generic.php, line 21, character 29 - line 21, character 30:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, »$b«, $sender);
 22 |   }
 23 | }

as the type of the local variable

The supertype comes from this hint

File ctor_generic.php, line 20, character 63 - line 20, character 66:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

I found the subtype for [Main] when I checked the subtype constraint in [Lower].

  [Lower] Step 1 of 2                                                           

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File ctor_generic.php, line 12, character 19 - line 12, character 29:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function »__construct«(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

The supertype comes from this expression

File ctor_generic.php, line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }


  [Lower] Step 2 of 2                                                           

These are function types so next I checked the 2nd function parameters.
Functions are contravariant in their parameters so the direction of the subtype relationship is reversed.

The subtype comes from this hint

File ctor_generic.php, line 20, character 39 - line 20, character 44:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, »string« $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

and flows into this expression

File ctor_generic.php, line 20, character 46 - line 20, character 47:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string »$b«, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

as the parameter hint

which itself flows into this expression

File ctor_generic.php, line 21, character 29 - line 21, character 30:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, »$b«, $sender);
 22 |   }
 23 | }

as the type of the local variable

The supertype comes from this generic parameter TB of TestServiceBase

File ctor_generic.php, line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

and flows into this hint

File ctor_generic.php, line 14, character 15 - line 14, character 16:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function __construct(
 13 |     protected TA $a,
 14 |     protected »TB« $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

as the instantiation of the generic TB

I found the supertype for [Main] when I checked the subtype constraint in [Upper].

  [Upper] Step 1 of 4                                                           

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File ctor_generic.php, line 12, character 19 - line 12, character 29:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function »__construct«(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

The supertype comes from this expression

File ctor_generic.php, line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }


  [Upper] Step 2 of 4                                                           

These are function types so next I checked the 3rd function parameters.
Functions are contravariant in their parameters so the direction of the subtype relationship is reversed.

The subtype comes from this hint

File ctor_generic.php, line 20, character 50 - line 20, character 67:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, »ISender<int, null>« $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

which is defined here

File ctor_generic.php, line 3, character 11 - line 3, character 17:

 1 | <?hh
 2 | 
 3 | interface »ISender«<-TA, -TB> {}
 4 | 
 5 | final class SenderWA implements ISender<int, null> {
 6 |   public function __construct(protected int $a, protected null $b) {}

and flows into this expression

File ctor_generic.php, line 20, character 69 - line 20, character 75:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> »$sender«) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

as the parameter hint

which itself flows into this expression

File ctor_generic.php, line 21, character 33 - line 21, character 39:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, »$sender«);
 22 |   }
 23 | }

as the type of the local variable

The supertype comes from this hint

File ctor_generic.php, line 15, character 5 - line 15, character 20:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function __construct(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     »ISender<TA, ?TB>« $sender,
 16 |   ) {}
 17 | }

(its definition was given above)


  [Upper] Step 3 of 4                                                           

ISender is a class or interface so next I checked the 2nd type arguments.
The type parameter is contravariant so the direction of the subtype relationship is reversed.

The subtype comes from this hint

File ctor_generic.php, line 15, character 17 - line 15, character 19:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function __construct(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, »?TB«> $sender,
 16 |   ) {}
 17 | }

The supertype comes from this hint

File ctor_generic.php, line 20, character 63 - line 20, character 66:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }


  [Upper] Step 4 of 4                                                           

The subtype is a nullable type so next I checked the subtype constraint is satisfied for both the null & non-null parts.

The subtype comes from this generic parameter TB of TestServiceBase

File ctor_generic.php, line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

and flows into this hint

File ctor_generic.php, line 15, character 18 - line 15, character 19:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function __construct(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?»TB«> $sender,
 16 |   ) {}
 17 | }

as the instantiation of the generic TB

The supertype is the same as before.

File ctor_generic.php, line 20, character 63 - line 20, character 66:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

