<?hh
// generated by idl-to-hni.php

/** This function returns an array with the current available SPL classes.
 * @return array - Returns an array containing the currently available SPL
 * classes.
 */
function spl_classes(): darray<classname<mixed>, classname<mixed>> {
  return dict[
    /* HH_FIXME[2049] */
    nameof ArrayIterator => ArrayIterator::class,
    /* HH_FIXME[2049] */
    nameof BadFunctionCallException => BadFunctionCallException::class,
    /* HH_FIXME[2049] */
    nameof BadMethodCallException => BadMethodCallException::class,
    /* HH_FIXME[2049] */
    nameof Countable => Countable::class,
    /* HH_FIXME[2049] */
    nameof DirectoryIterator => DirectoryIterator::class,
    /* HH_FIXME[2049] */
    nameof DomainException => DomainException::class,
    /* HH_FIXME[2049] */
    nameof EmptyIterator => EmptyIterator::class,
    /* HH_FIXME[2049] */
    nameof FilesystemIterator => FilesystemIterator::class,
    /* HH_FIXME[2049] */
    nameof FilterIterator => FilterIterator::class,
    /* HH_FIXME[2049] */
    nameof GlobIterator => GlobIterator::class,
    /* HH_FIXME[2049] */
    nameof InfiniteIterator => InfiniteIterator::class,
    /* HH_FIXME[2049] */
    nameof InvalidArgumentException => InvalidArgumentException::class,
    /* HH_FIXME[2049] */
    nameof IteratorIterator => IteratorIterator::class,
    /* HH_FIXME[2049] */
    nameof LengthException => LengthException::class,
    /* HH_FIXME[2049] */
    nameof LogicException => LogicException::class,
    /* HH_FIXME[2049] */
    nameof NoRewindIterator => NoRewindIterator::class,
    /* HH_FIXME[2049] */
    nameof OuterIterator => OuterIterator::class,
    /* HH_FIXME[2049] */
    nameof OutOfBoundsException => OutOfBoundsException::class,
    /* HH_FIXME[2049] */
    nameof OutOfRangeException => OutOfRangeException::class,
    /* HH_FIXME[2049] */
    nameof OverflowException => OverflowException::class,
    /* HH_FIXME[2049] */
    nameof RangeException => RangeException::class,
    /* HH_FIXME[2049] */
    nameof RecursiveDirectoryIterator => RecursiveDirectoryIterator::class,
    /* HH_FIXME[2049] */
    nameof RecursiveFilterIterator => RecursiveFilterIterator::class,
    /* HH_FIXME[2049] */
    nameof RecursiveIterator => RecursiveIterator::class,
    /* HH_FIXME[2049] */
    nameof RecursiveIteratorIterator => RecursiveIteratorIterator::class,
    /* HH_FIXME[2049] */
    nameof RecursiveRegexIterator => RecursiveRegexIterator::class,
    /* HH_FIXME[2049] */
    nameof RegexIterator => RegexIterator::class,
    /* HH_FIXME[2049] */
    nameof RuntimeException => RuntimeException::class,
    /* HH_FIXME[2049] */
    nameof SeekableIterator => SeekableIterator::class,
    /* HH_FIXME[2049] */
    nameof SplDoublyLinkedList => SplDoublyLinkedList::class,
    /* HH_FIXME[2049] */
    nameof SplFileInfo => SplFileInfo::class,
    /* HH_FIXME[2049] */
    nameof SplFileObject => SplFileObject::class,
    /* HH_FIXME[2049] */
    nameof SplHeap => SplHeap::class,
    /* HH_FIXME[2049] */
    nameof SplMinHeap => SplMinHeap::class,
    /* HH_FIXME[2049] */
    nameof SplMaxHeap => SplMaxHeap::class,
    /* HH_FIXME[2049] */
    nameof SplObserver => SplObserver::class,
    /* HH_FIXME[2049] */
    nameof SplPriorityQueue => SplPriorityQueue::class,
    /* HH_FIXME[2049] */
    nameof SplQueue => SplQueue::class,
    /* HH_FIXME[2049] */
    nameof SplStack => SplStack::class,
    /* HH_FIXME[2049] */
    nameof SplSubject => SplSubject::class,
    /* HH_FIXME[2049] */
    nameof SplTempFileObject => SplTempFileObject::class,
    /* HH_FIXME[2049] */
    nameof UnderflowException => UnderflowException::class,
    /* HH_FIXME[2049] */
    nameof UnexpectedValueException => UnexpectedValueException::class,
  ];
}

/** This function returns a unique identifier for the object. This id can be
 * used as a hash key for storing objects or for identifying an object.
 * @param object $obj - Any object.
 * @return string - A string that is unique for each currently existing object
 * and is always the same for each object.
 */
<<__Native>>
function spl_object_hash(readonly \HH\object $obj)[]: string;

/** This function returns low level raw pointer the object. Used by closure and
 * internal purposes.
 * @param object $obj - Any object.
 * @return int - Low level ObjectData pointer.
 */
<<__Native("NoInjection")>>
function hphp_object_pointer(\HH\object $obj): int;

/** This function returns this object if present, or NULL.
 * @return mixed - This object.
 */
<<__Native("NoInjection")>>
function hphp_get_this(): mixed;

/** This function returns an array with the names of the interfaces that the
 * given class and its parents implement.
 * @param mixed $obj - An object (class instance) or a string (class name).
 * @param bool $autoload - Whether to allow this function to load the class
 * automatically.
 * @return mixed - An array on success, or FALSE on error.
 */
<<__Native>>
function class_implements(mixed $obj,
                          bool $autoload = true)[]: mixed;

/** This function returns an array with the name of the parent classes of the
 * given class.
 * @param mixed $obj - An object (class instance) or a string (class name).
 * @param bool $autoload - Whether to allow this function to load the class
 * automatically.
 * @return mixed - An array on success, or FALSE on error.
 */
<<__Native>>
function class_parents(mixed $obj,
                       bool $autoload = true)[]: mixed;

/** This function returns an array with the names of the traits that the given
 * class uses.
 * @param mixed $obj - An object (class instance) or a string (class name).
 * @param bool $autoload - Whether to allow this function to load the class
 * automatically.
 * @return mixed - An array on success, or FALSE on error.
 */
<<__Native>>
function class_uses(mixed $obj,
                    bool $autoload = true)[]: mixed;

/** Calls a function for every element in an iterator.
 * @param mixed $obj - The class to iterate over.
 * @param mixed $func - The callback function to call on every element. The
 * function must return TRUE in order to continue iterating over the iterator.
 * @param array $params - Arguments to pass to the callback function.
 * @return mixed - Returns the iteration count.
 */
function iterator_apply(
  mixed $obj,
  dynamic $func,
  varray<dynamic> $params = vec[]
): int {
  if (!is_object($obj) || !($obj is \HH\Traversable<_>)) {
    trigger_error("Argument must implement interface Traversable", E_RECOVERABLE_ERROR);
    return 0;
  }
  $count = 0;
  foreach ($obj as $v) {
    if ($func(...$params) !== true) {
      break;
    }
    ++$count;
  }
  return $count;
}

/** Count the elements in an iterator.
 * @param mixed $obj - The iterator being counted.
 * @return mixed - The number of elements in iterator.
 */
function iterator_count(mixed $obj): mixed {
  if (!is_object($obj) || !($obj is \HH\Traversable<_>)) {
    trigger_error("Argument must implement interface Traversable", E_RECOVERABLE_ERROR);
    return 0;
  }
  $count = 0;
  foreach ($obj as $_) {
    ++$count;
  }
  return $count;
}
